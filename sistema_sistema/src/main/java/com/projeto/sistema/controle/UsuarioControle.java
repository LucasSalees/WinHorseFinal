package com.projeto.sistema.controle;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.projeto.sistema.modelos.Usuario;
import com.projeto.sistema.repositorios.UsuarioRepositorio;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;

@Controller
public class UsuarioControle {
	
	@Autowired
    private UsuarioRepositorio usuarioRepositorio;

	// Listar todos os usu√°rios
	@GetMapping("/administrativo/usuarios/listar")
	public ModelAndView listarUsuario(HttpSession session) {
	    // Verifica se o usu√°rio est√° logado
	    if (session.getAttribute("usuarioLogado") == null) {
	        return new ModelAndView("redirect:/login"); // Redireciona para o login se o usu√°rio n√£o estiver logado
	    }

	    // Obt√©m o usu√°rio logado da sess√£o
	    Usuario usuario = (Usuario) session.getAttribute("usuarioLogado");

	    // Cria o ModelAndView para a p√°gina de listagem
	    ModelAndView mv = new ModelAndView("administrativo/usuarios/lista");

	    // Adiciona o usu√°rio logado ao modelo
	    mv.addObject("usuario", usuario);

	    // Adiciona a lista de usu√°rios ao modelo
	    mv.addObject("listaUsuarios", usuarioRepositorio.findAll());

	    return mv; // Retorna a p√°gina de listagem
	}

	// Cadastro de usu√°rio
	@GetMapping("/administrativo/usuarios/cadastro")
	public ModelAndView cadastrar(Usuario usuario, HttpSession session) {
	    // Verifica se o usu√°rio est√° logado
	    if (session.getAttribute("usuarioLogado") == null) {
	        return new ModelAndView("redirect:/login"); // Redireciona para o login se o usu√°rio n√£o estiver logado
	    }

	    // Obt√©m o usu√°rio logado da sess√£o
	    Usuario usuarioLogado = (Usuario) session.getAttribute("usuarioLogado");

	    // Cria o ModelAndView para a p√°gina de cadastro
	    ModelAndView mv = new ModelAndView("/administrativo/usuarios/cadastro");

	    // Adiciona o usu√°rio logado ao modelo (caso queira mostrar alguma informa√ß√£o do usu√°rio logado)
	    mv.addObject("usuarioLogado", usuarioLogado);

	    // Preenche o objeto "usuario" com diasPermitidos (por exemplo, todos os dias da semana)
	    if (usuario.getDiasPermitidos() == null) {
	        usuario.setDiasPermitidos(Arrays.asList("Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado", "Domingo"));
	    }

	    // Adiciona o objeto de usu√°rio ao modelo para o formul√°rio de cadastro
	    mv.addObject("Usuario", usuario);

	    return mv; // Retorna a p√°gina de cadastro
	}


	@PostMapping("/administrativo/usuarios/salvar")
	public ModelAndView salvar(@ModelAttribute Usuario usuario, BindingResult result) {
	    // Valida√ß√£o do formul√°rio
	    if (result.hasErrors()) {
	        return cadastrar(usuario, null);  // Retorna para o formul√°rio com os erros
	    }

	    // Definir a data de cadastro (utiliza a data e hora atuais)
	    usuario.setData_cadastro(LocalDateTime.now());

	    // üñ®Ô∏è Exibir os valores no terminal
	    System.out.println("USU√ÅRIO FEZ UM CADASTRO DE UM USU√ÅRIO");
	    System.out.println("Cadastro de Usu√°rio:");
	    System.out.println("Nome: " + usuario.getNome_usuario());
	    System.out.println("Fun√ß√£o: " + usuario.getFuncao());
	    System.out.println("E-mail: " + usuario.getEmail());
	    System.out.println("Senha: " + usuario.getSenha());
	    System.out.println("Tipo de Usu√°rio: " + usuario.getTipo());
	    System.out.println("Dias Permitidos: " + usuario.getDiasPermitidos());
	    System.out.println("Hor√°rio Permitido: " + usuario.getHoraInicio() + " at√© " + usuario.getHoraFim());
	    System.out.println("Data de Cadastro: " + usuario.getData_cadastro());

	    try {
	        // Salvar o usu√°rio no banco de dados
	        usuarioRepositorio.save(usuario);
	    } catch (Exception e) {
	        e.printStackTrace();
	        result.rejectValue("email", "error.usuario", "Erro ao salvar o Usu√°rio. Tente novamente.");
	        System.out.println("Erro ao salvar o Usu√°rio. Tente novamente.");
	        return cadastrar(usuario, null);
	    }

	    // Ap√≥s salvar com sucesso, redireciona para a listagem dos usu√°rios
	    return new ModelAndView("redirect:/administrativo/usuarios/listar");  
	}

    
    @GetMapping("/administrativo/usuarios/eventoUsuario/editarUsuario/{id_usuario}")
    public String editar(@PathVariable("id_usuario") Long id_usuario, Model model, HttpSession session) {
        // Verifica se o usu√°rio est√° logado
        if (session.getAttribute("usuarioLogado") == null) {
            return "redirect:/login"; // Redireciona para o login se o usu√°rio n√£o estiver logado
        }

        // Obt√©m o usu√°rio logado da sess√£o
        Usuario usuarioLogado = (Usuario) session.getAttribute("usuarioLogado");

        // Busca o usu√°rio pelo id
        Optional<Usuario> usuario = usuarioRepositorio.findById(id_usuario);

        // Se o usu√°rio for encontrado, exibe a p√°gina de edi√ß√£o
        if (usuario.isPresent()) {
            Usuario usuarioAtual = usuario.get();
            
            // Passa o objeto usu√°rio e o usu√°rio logado para o modelo
            model.addAttribute("usuario", usuarioAtual);
            model.addAttribute("usuarioLogado", usuarioLogado);

            // Passa a lista de diasPermitidos para o modelo
            model.addAttribute("diasPermitidos", usuarioAtual.getDiasPermitidos());

            return "administrativo/usuarios/eventoUsuario"; // Retorna para a p√°gina de edi√ß√£o
        }

        // Caso n√£o encontre o usu√°rio, redireciona para a lista de usu√°rios
        return "redirect:/administrativo/usuarios/listar";
    }
    
    @GetMapping("/removerUsuario/{id_usuario}")
    public String remover(@PathVariable("id_usuario") Long id_usuario, Model model, HttpSession session) {
        
        // Verifica se o usu√°rio est√° logado na sess√£o
        if (session.getAttribute("usuarioLogado") == null) {
            return "redirect:/login"; // Redireciona para login se o usu√°rio n√£o estiver logado
        }

        // Obt√©m o usu√°rio logado da sess√£o
        Usuario usuarioLogado = (Usuario) session.getAttribute("usuarioLogado");
        model.addAttribute("usuario", usuarioLogado);

        try {
            // Busca o usu√°rio pelo ID
            Optional<Usuario> usuarioOptional = usuarioRepositorio.findById(id_usuario);
            if (usuarioOptional.isPresent()) {
                Usuario usuarioEncontrado = usuarioOptional.get(); // Obt√©m o usu√°rio
                model.addAttribute("remover", usuarioEncontrado); // Envia o objeto para o modelo

                // Exibir os dados do usu√°rio a ser exclu√≠do
                System.out.println("USU√ÅRIO FEZ UMA TENTATIVA DE EXCLUS√ÉO DE USU√ÅRIO");
                System.out.println("USU√ÅRIO A SER EXCLU√çDO:");
                System.out.println("ID: " + usuarioEncontrado.getId_usuario());
                System.out.println("Nome: " + usuarioEncontrado.getNome_usuario());
                System.out.println("Fun√ß√£o: " + usuarioEncontrado.getFuncao());
                System.out.println("E-mail: " + usuarioEncontrado.getEmail());
                System.out.println("Tipo de Usu√°rio: " + usuarioEncontrado.getTipo());
                System.out.println("Dias Permitidos: " + usuarioEncontrado.getDiasPermitidos());
                System.out.println("Hor√°rio Permitido: " + usuarioEncontrado.getHoraInicio() + " at√© " + usuarioEncontrado.getHoraFim());

                // Tenta excluir o usu√°rio
                usuarioRepositorio.deleteById(id_usuario);
                model.addAttribute("message", "Usu√°rio removido com sucesso!");
                System.out.println("STATUS DA EXCLUS√ÉO:");
                System.out.println("Exclus√£o confirmada.");
                return "administrativo/usuarios/remover";
            } else {
                // Caso o usu√°rio n√£o seja encontrado
                model.addAttribute("message", "Usu√°rio n√£o encontrado!");
                System.out.println("STATUS DA EXCLUS√ÉO:");
                System.out.println("ERRO, usu√°rio n√£o encontrado.");
                return "administrativo/usuarios/remover";
            }
        } catch (DataIntegrityViolationException e) {
            // Caso ocorra um erro de viola√ß√£o de integridade no banco de dados
            model.addAttribute("message", "Erro ao excluir: Usu√°rio est√° vinculado a outras entidades.");
            System.out.println("STATUS DA EXCLUS√ÉO:");
            System.out.println("ERRO, Usu√°rio est√° vinculado a outras entidades.");
            return "administrativo/usuarios/remover";
        } catch (Exception e) {
            // Caso qualquer outro erro ocorra
            System.out.println("Erro ao excluir o usu√°rio: " + e.getMessage());
            model.addAttribute("message", "Erro ao excluir: " + e.getMessage());
            System.out.println("STATUS DA EXCLUS√ÉO:");
            System.out.println("ERRO, Erro ao excluir: " + e.getMessage());
            return "administrativo/usuarios/remover";
        }
    }


    @PostMapping("/administrativo/usuarios/editarUsuario")
    public String salvarEdicaoUsuario(@ModelAttribute("usuario") Usuario usuario, RedirectAttributes redirectAttributes) {
        // Buscar o usu√°rio existente pelo ID
        Optional<Usuario> usuarioExistenteOpt = usuarioRepositorio.findById(usuario.getId_usuario());

        if (usuarioExistenteOpt.isPresent()) {
            Usuario usuarioExistente = usuarioExistenteOpt.get();

            // Exibir os dados antigos antes da altera√ß√£o
            System.out.println("USU√ÅRIO FEZ UMA EDI√á√ÉO DE UM USU√ÅRIO");
            System.out.println("Dados Antigos do Usu√°rio:");
            System.out.println("Nome: " + usuarioExistente.getNome_usuario());
            System.out.println("Fun√ß√£o: " + usuarioExistente.getFuncao());
            System.out.println("E-mail: " + usuarioExistente.getEmail());
            System.out.println("Senha: " + usuarioExistente.getSenha());
            System.out.println("Tipo de Usu√°rio: " + usuarioExistente.getTipo());
            System.out.println("Dias Permitidos: " + usuarioExistente.getDiasPermitidos());
            System.out.println("Hor√°rio Permitido: " + usuarioExistente.getHoraInicio() + " at√© " + usuarioExistente.getHoraFim());

            // Atualizar os campos edit√°veis do usu√°rio
            usuarioExistente.setNome_usuario(usuario.getNome_usuario());
            usuarioExistente.setEmail(usuario.getEmail());
            usuarioExistente.setSenha(usuario.getSenha());
            usuarioExistente.setTipo(usuario.getTipo());
            usuarioExistente.setFuncao(usuario.getFuncao());
            usuarioExistente.setDiasPermitidos(usuario.getDiasPermitidos()); 
            usuarioExistente.setHoraInicio(usuario.getHoraInicio());
            usuarioExistente.setHoraFim(usuario.getHoraFim());

            // Exibir os novos dados ap√≥s a altera√ß√£o
            System.out.println("Novos Dados do Usu√°rio:");
            System.out.println("Nome: " + usuarioExistente.getNome_usuario());
            System.out.println("Fun√ß√£o: " + usuarioExistente.getFuncao());
            System.out.println("E-mail: " + usuarioExistente.getEmail());
            System.out.println("Senha: " + usuarioExistente.getSenha());
            System.out.println("Tipo de Usu√°rio: " + usuarioExistente.getTipo());
            System.out.println("Dias Permitidos: " + usuarioExistente.getDiasPermitidos());
            System.out.println("Hor√°rio Permitido: " + usuarioExistente.getHoraInicio() + " at√© " + usuarioExistente.getHoraFim());

            // Salvar as atualiza√ß√µes no banco de dados
            usuarioRepositorio.save(usuarioExistente);

            // Mensagem de sucesso
            redirectAttributes.addFlashAttribute("mensagemSucesso", "Usu√°rio atualizado com sucesso.");
            return "redirect:/administrativo/usuarios/listar";  
        } else {
            // Caso o usu√°rio n√£o seja encontrado
            redirectAttributes.addFlashAttribute("mensagemErro", "Usu√°rio n√£o encontrado.");
            return "redirect:/administrativo/usuarios/listar";
        }
    }


    @PostMapping("/administrativo/usuarios/editarUsuarioSenha")
    public String salvarEdicaoUsuarioSenha(
            @ModelAttribute("usuario") Usuario usuario,
            HttpServletRequest request,
            RedirectAttributes redirectAttributes) {
        
        Optional<Usuario> usuarioExistenteOpt = usuarioRepositorio.findById(usuario.getId_usuario());

        if (usuarioExistenteOpt.isPresent()) {
            Usuario usuarioExistente = usuarioExistenteOpt.get();
            usuarioExistente.setSenha(usuario.getSenha());
            usuarioRepositorio.save(usuarioExistente);

            // Mensagem de sucesso
            redirectAttributes.addFlashAttribute("mensagemSucesso", "Senha alterada com sucesso!");
        } else {
            redirectAttributes.addFlashAttribute("mensagemErro", "Usu√°rio n√£o encontrado.");
        }

        // Obt√©m a URL da p√°gina anterior
        String referer = request.getHeader("Referer");
        
        // Se n√£o houver referer, redireciona para uma p√°gina padr√£o
        if (referer == null || referer.isEmpty()) {
            referer = "/administrativo/usuarios";
        }

        return "redirect:" + referer;
    }


    @GetMapping("/administrativo/usuarios/perfil")
    public String perfilUsuario(Model model, HttpSession session) {
        // Verifica se o usu√°rio est√° logado
        if (session.getAttribute("usuarioLogado") == null) {
            return "redirect:/login"; // Redireciona para o login se o usu√°rio n√£o estiver logado
        }

     // Obt√©m o usu√°rio logado da sess√£o
        Usuario usuario = (Usuario) session.getAttribute("usuarioLogado");
        System.out.println("Hora Fim do Usu√°rio: " + usuario.getHoraFim()); // Verifica se o valor existe

        if (usuario.getHoraFim() != null) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            model.addAttribute("horaFim", usuario.getHoraFim().format(formatter));
        } else {
            model.addAttribute("horaFim", ""); // Evita erro caso seja null
        }
        
        Usuario usuarioLogado = (Usuario) session.getAttribute("usuarioLogado");

        // Adiciona as informa√ß√µes do usu√°rio ao modelo
        model.addAttribute("usuario", usuarioLogado);

        // Passa a lista de diasPermitidos e hor√°rios para o modelo
        model.addAttribute("diasPermitidos", usuarioLogado.getDiasPermitidos());
        model.addAttribute("horaInicio", usuarioLogado.getHoraInicio());  // Adicionando hora de in√≠cio
        model.addAttribute("horaFim", usuarioLogado.getHoraFim());        // Adicionando hora de fim

        // Retorna para a p√°gina de perfil
        return "administrativo/usuarios/perfil"; // Nome do HTML a ser exibido
    }



}